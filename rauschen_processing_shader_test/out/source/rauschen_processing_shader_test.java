/* autogenerated by Processing revision 1295 on 2025-03-10 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.concurrent.ThreadLocalRandom;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class rauschen_processing_shader_test extends PApplet {



// main window
int width = 1000;
int height = 1000;

// volatile PImage buffer;

public void settings() {
	size(width, height, OPENGL);
	pixelDensity(1);
}

public void setup() {
	size(width, height, OPENGL);
	frameRate(120);

	loadPixels();
	
	// buffer = createImage(int(width), int(height), RGB);
	// buffer.loadPixels();
}

public void draw() { 
	pushMatrix();
		for (int x = 0; x < width; x++) {
			for (int y = 0; y < height; y++) {

				float r = intRandom(50, 255);
				float g = intRandom(50, 255);
				float b = intRandom(50, 255);

				// buffer.pixels[xy2i(x, y)] = color(r, g, b);

				// buffer.pixels[xy2i(x, y)] = 0xff000000 | ((int) (r) << 16 | (int) (g) << 8 | (int) (b));

				pixels[y * width + x] = color(r, g, b);
			}
		}
		updatePixels();
		//buffer.updatePixels();
		//image(buffer, 0, 0, width, height);
	popMatrix();

	// fps 
	fill(255, 0, 0);
	textSize(25);
	text("fps: "+(int) frameRate, 50, 50);
}
// Fast integer randon function
public static int intRandom(int min, int max) {
   return ThreadLocalRandom.current().nextInt(min, max + 1);
}


  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "rauschen_processing_shader_test" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
