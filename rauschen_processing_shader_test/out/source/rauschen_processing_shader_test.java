/* autogenerated by Processing revision 1295 on 2025-03-10 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.concurrent.ThreadLocalRandom;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class rauschen_processing_shader_test extends PApplet {



// Window size
int width = 1000;
int height = 1000;

PShader noiseShader;

float t = 0;

public void setup() {
    /* size commented out by preprocessor */;
    /* pixelDensity commented out by preprocessor */;
	noiseShader = loadShader("noiseFrag.glsl");
	noiseShader.set("u_resolution", PApplet.parseFloat(width), PApplet.parseFloat(height));
}

public void draw() { 
    t += 1000;
    noiseShader.set("u_time", t); // pass time to shader
    shader(noiseShader); // apply shader
    rect(0, 0, width, height); // render a full-screen rectangle

	// Disable shader before drawing text
    resetShader();

    // display FPS
    fill(255, 0, 0);
    textSize(25);
    text("fps: " + (int) frameRate, 50, 50);
}


// Fast integer randon function
public static int intRandom(int min, int max) {
   return ThreadLocalRandom.current().nextInt(min, max + 1);
}


  public void settings() { size(1000, 1000, P2D);
pixelDensity(1); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "rauschen_processing_shader_test" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
