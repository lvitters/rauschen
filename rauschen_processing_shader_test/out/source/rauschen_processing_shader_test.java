/* autogenerated by Processing revision 1295 on 2025-03-11 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.concurrent.ThreadLocalRandom;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class rauschen_processing_shader_test extends PApplet {



// Window size
float width = 1000;
float height = 1000;

// timed events
int minSwitchTime = 1;
int maxSwitchTime = 2;
int nextResEvent = 1;		// init in X seconds
int resEventCounter = 0;

PGraphics resBuffer;
PShader noiseShader;

float t = 0;

public void setup() {
    /* size commented out by preprocessor */;
    /* pixelDensity commented out by preprocessor */;

	resBuffer = createGraphics((int)width/4, (int)height/4, P2D);

	noiseShader = loadShader("noiseFrag.glsl");
	noiseShader.set("u_resolution", width, height);
}

public void draw() { 
    t += .01f;
    noiseShader.set("u_time", t); // pass time to shader

	resBuffer.beginDraw();
		resBuffer.shader(noiseShader); // apply shader
		resBuffer.rect(0, 0, width, height); // render a full-screen rectangle
	resBuffer.endDraw();
	image(resBuffer, 0, 0, width, height);

	// Disable shader before drawing text
    resetShader();

	timedEvents();

    // display FPS
    fill(255, 0, 0);
    textSize(25);
    text("fps: " + (int) frameRate, 50, 50);
}

public void resizeBuffer(float w, float h) {
	resBuffer.dispose();
	resBuffer = createGraphics((int)w, (int)h, P2D);
}

// sometimes things should happen at random intervals instead
public void timedEvents() {
	// sometimes switch to a new resolution step
	resEventCounter++;
	if (resEventCounter > (nextResEvent * 60)) {
		resizeBuffer(random(width), random(height));
		nextResEvent = (int)random(minSwitchTime, maxSwitchTime);
		resEventCounter = 0;
	}
}
// Fast integer randon function
public static int intRandom(int min, int max) {
   return ThreadLocalRandom.current().nextInt(min, max + 1);
}


  public void settings() { size(1000, 1000, P2D);
pixelDensity(1); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "rauschen_processing_shader_test" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
